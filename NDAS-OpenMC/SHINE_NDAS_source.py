# ******************************************************************************
# Copyright 2025, SHINE Technologies. All rights reserved.
# ******************************************************************************

import numpy as np
import openmc

def get_spatial_distribution():

    # Distribution of azimuthal angle (phi) coordinates
    dist_phi = openmc.stats.Uniform(a=0, b=2 * np.pi)

    # Distribution of axial (z) coordinates
    dist_z_x = np.linspace(-68.5, 68.5, 138)
    dist_z_p = [1.62336e+08, 4.67523e+08, 7.56034e+08, 1.05696e+09, 1.37603e+09, 1.98892e+09, 2.77825e+09, 3.59512e+09, 4.47835e+09, 6.05361e+09,
                7.91507e+09, 9.83015e+09, 1.22283e+10, 1.54946e+10, 1.88597e+10, 2.26172e+10, 2.75065e+10, 3.25832e+10, 3.80906e+10, 4.46476e+10,
                5.13845e+10, 5.89295e+10, 6.75831e+10, 7.64219e+10, 8.64403e+10, 9.70474e+10, 1.08082e+11, 1.20196e+11, 1.32546e+11, 1.45893e+11,
                1.59832e+11, 1.74009e+11, 1.88553e+11, 2.03267e+11, 2.18482e+11, 2.33909e+11, 2.48874e+11, 2.63462e+11, 2.77922e+11, 2.91961e+11,
                3.05795e+11, 3.18065e+11, 3.30033e+11, 3.40531e+11, 3.50455e+11, 3.59006e+11, 3.66317e+11, 3.72807e+11, 3.77681e+11, 3.82043e+11,
                3.84534e+11, 3.86666e+11, 3.87327e+11, 3.87603e+11, 3.86581e+11, 3.84976e+11, 3.82574e+11, 3.79457e+11, 3.76041e+11, 3.72067e+11,
                3.67933e+11, 3.63234e+11, 3.58420e+11, 3.53041e+11, 3.47538e+11, 3.41819e+11, 3.36005e+11, 3.30275e+11, 3.24638e+11, 3.19007e+11,
                3.13374e+11, 3.07749e+11, 3.02111e+11, 2.96486e+11, 2.90922e+11, 2.85394e+11, 2.80068e+11, 2.74985e+11, 2.69956e+11, 2.65068e+11,
                2.60212e+11, 2.55465e+11, 2.50764e+11, 2.46171e+11, 2.41683e+11, 2.37293e+11, 2.33191e+11, 2.29133e+11, 2.25219e+11, 2.21366e+11,
                2.17598e+11, 2.13950e+11, 2.10333e+11, 2.06837e+11, 2.03373e+11, 2.00046e+11, 1.96835e+11, 1.93674e+11, 1.90688e+11, 1.87734e+11,
                1.84892e+11, 1.82130e+11, 1.79401e+11, 1.76774e+11, 1.74168e+11, 1.71664e+11, 1.69239e+11, 1.66842e+11, 1.64555e+11, 1.62291e+11,
                1.60086e+11, 1.57951e+11, 1.55830e+11, 1.53781e+11, 1.51760e+11, 1.49779e+11, 1.47896e+11, 1.46025e+11, 1.44220e+11, 1.42468e+11,
                1.40728e+11, 1.39058e+11, 1.37411e+11, 1.35785e+11, 1.34213e+11, 1.32650e+11, 1.31131e+11, 1.29665e+11, 1.28207e+11, 1.26807e+11,
                1.25440e+11, 1.24084e+11, 1.22781e+11, 1.21495e+11, 1.20222e+11, 1.18989e+11, 1.17766e+11]
    dist_z = openmc.stats.Tabular(x=dist_z_x, p=dist_z_p, interpolation='histogram')

    # Distribution of radius (r) coordinates (simplified)
    # In reality, for a 137 cm target chamber with sufficient diameter to avoid beam scraping, the radius is 0.2 cm at
    # the top and 5.132 cm at the bottom. This results in a source-averaged radius of 2.53179 cm. With a target chamber
    # diameter of 4.1783 cm, some of the beam is scraped, and the source-averaged radius decreases to 2.52630 cm.
    r_max  = 4.1783  # Inner target chamber radius [cm]
    r_min  = 0.2     # Beam radius at target chamber entrance [cm]
    div    = 0.036   # Beam divergence [rad]
    r_vals = r_min + (dist_z_x - dist_z_x[0]) * div
    r_vals = 0.5 * (r_vals[:-1] + r_vals[1:])
    r_vals[r_vals > r_max] = r_max
    r_mean = np.sum(r_vals * np.array(dist_z_p)[::-1]) / sum(dist_z_p)
    r_mean = round(r_mean, 5)
    dist_r = openmc.stats.PowerLaw(a=0, b=r_mean, n=1)

    # Coordinates (x0, y0, z0) of the center of the cylindrical reference frame
    origin = (0, 0, 0)

    # Overall spatial distribution
    dist_space = openmc.stats.CylindricalIndependent(r=dist_r, phi=dist_phi, z=dist_z, origin=origin)
    return dist_space

def get_angular_distribution():

    # Distribution of the cosine of the polar angle
    dist_mu_x = np.cos(np.linspace(np.pi, 0, 61))
    dist_mu_p = [1.72835e+08, 5.18134e+08, 8.62324e+08, 1.20466e+09, 1.54441e+09, 1.88083e+09, 2.21317e+09, 2.54069e+09, 2.86264e+09, 3.17828e+09,
                 3.48687e+09, 3.78764e+09, 4.07986e+09, 4.36279e+09, 4.63568e+09, 4.89781e+09, 5.14845e+09, 5.38687e+09, 5.61237e+09, 5.82427e+09,
                 6.02189e+09, 6.20457e+09, 6.37168e+09, 6.52263e+09, 6.65683e+09, 6.77375e+09, 6.87289e+09, 6.95378e+09, 7.01600e+09, 7.05920e+09,
                 7.08305e+09, 7.08728e+09, 7.07170e+09, 7.03615e+09, 6.98056e+09, 6.90491e+09, 6.80925e+09, 6.69369e+09, 6.55842e+09, 6.40369e+09,
                 6.22984e+09, 6.03725e+09, 5.82640e+09, 5.59781e+09, 5.35209e+09, 5.08989e+09, 4.81196e+09, 4.51908e+09, 4.21210e+09, 3.89193e+09,
                 3.55952e+09, 3.21589e+09, 2.86208e+09, 2.49919e+09, 2.12835e+09, 1.75073e+09, 1.36752e+09, 9.79936e+08, 5.89220e+08, 1.96617e+08]
    dist_mu_p /= (dist_mu_x[1:] - dist_mu_x[:-1])
    dist_mu = openmc.stats.Tabular(x=dist_mu_x, p=dist_mu_p, interpolation='histogram')

    # Distribution of the azimuthal angle in radians
    dist_phi = openmc.stats.Uniform(a=0, b=2 * np.pi)

    # Direction from which polar angle is measured
    reference_uvw = (0, 0, -1)

    # Overall angular distribution
    dist_angle = openmc.stats.PolarAzimuthal(mu=dist_mu, phi=dist_phi, reference_uvw=reference_uvw)
    return dist_angle

def get_energy_distribution():

    # Setup energy bins
    dist_e_x = np.linspace(0, 16e6, 1601)
    dist_e_p = np.zeros(1601)

    # DD portion of the spectrum (1.98 - 3.20 MeV)
    dist_e_p[ 199: 320] = [7.64270e+06, 5.52318e+07, 1.02862e+08, 1.44291e+08, 1.80369e+08, 2.11402e+08, 2.38222e+08, 2.60936e+08, 2.80172e+08, 2.96105e+08,
                           3.09333e+08, 3.20085e+08, 3.28541e+08, 3.34947e+08, 3.39582e+08, 3.42616e+08, 3.44352e+08, 3.44618e+08, 3.43935e+08, 3.42261e+08,
                           3.39658e+08, 3.36369e+08, 3.32641e+08, 3.27983e+08, 3.23360e+08, 3.18148e+08, 3.12530e+08, 3.07077e+08, 3.01358e+08, 2.95573e+08,
                           2.89974e+08, 2.84355e+08, 2.78998e+08, 2.73648e+08, 2.68685e+08, 2.63867e+08, 2.59356e+08, 2.55087e+08, 2.50966e+08, 2.47471e+08,
                           2.43407e+08, 2.40794e+08, 2.37394e+08, 2.34770e+08, 2.32234e+08, 2.29950e+08, 2.27954e+08, 2.26147e+08, 2.24611e+08, 2.23296e+08,
                           2.22267e+08, 2.21504e+08, 2.20836e+08, 2.20515e+08, 2.20434e+08, 2.20586e+08, 2.20959e+08, 2.21552e+08, 2.22375e+08, 2.23482e+08,
                           2.24698e+08, 2.26310e+08, 2.28012e+08, 2.29742e+08, 2.31849e+08, 2.34144e+08, 2.36337e+08, 2.38713e+08, 2.41335e+08, 2.43771e+08,
                           2.46450e+08, 2.49003e+08, 2.51694e+08, 2.54146e+08, 2.56740e+08, 2.59237e+08, 2.61593e+08, 2.63912e+08, 2.66158e+08, 2.68050e+08,
                           2.70068e+08, 2.71777e+08, 2.73470e+08, 2.74626e+08, 2.75894e+08, 2.76695e+08, 2.77499e+08, 2.77833e+08, 2.77953e+08, 2.77762e+08,
                           2.77242e+08, 2.76257e+08, 2.75221e+08, 2.73361e+08, 2.71639e+08, 2.68925e+08, 2.66244e+08, 2.62694e+08, 2.58944e+08, 2.54662e+08,
                           2.49687e+08, 2.44134e+08, 2.38141e+08, 2.31467e+08, 2.24131e+08, 2.16092e+08, 2.07351e+08, 1.97926e+08, 1.87699e+08, 1.76763e+08,
                           1.64845e+08, 1.52232e+08, 1.38743e+08, 1.24232e+08, 1.08846e+08, 9.24370e+07, 7.50819e+07, 5.65925e+07, 3.70471e+07, 1.63531e+07,
                           7.23673e+05]

    # DT portion of the spectrum (13.04 - 15.33 MeV)
    dist_e_p[1305:1533] = [8.24791e+07, 1.54834e+09, 3.54293e+09, 5.58277e+09, 7.67674e+09, 9.82753e+09, 1.20306e+10, 1.42905e+10, 1.66230e+10, 1.90069e+10,
                           2.14745e+10, 2.40012e+10, 2.65952e+10, 2.92852e+10, 3.20672e+10, 3.49000e+10, 3.78522e+10, 4.09030e+10, 4.40180e+10, 4.72673e+10,
                           5.06304e+10, 5.40275e+10, 5.75831e+10, 6.12739e+10, 6.50368e+10, 6.89098e+10, 7.28542e+10, 7.70070e+10, 8.11962e+10, 8.54260e+10,
                           8.97837e+10, 9.42154e+10, 9.85930e+10, 1.03145e+11, 1.07542e+11, 1.12106e+11, 1.16465e+11, 1.20820e+11, 1.25097e+11, 1.29243e+11,
                           1.33216e+11, 1.37004e+11, 1.40687e+11, 1.44151e+11, 1.47269e+11, 1.50367e+11, 1.53200e+11, 1.55690e+11, 1.58100e+11, 1.60305e+11,
                           1.62203e+11, 1.64025e+11, 1.65588e+11, 1.67000e+11, 1.68374e+11, 1.69448e+11, 1.70445e+11, 1.71287e+11, 1.72119e+11, 1.72666e+11,
                           1.73306e+11, 1.73798e+11, 1.74229e+11, 1.74541e+11, 1.74953e+11, 1.75119e+11, 1.75321e+11, 1.75493e+11, 1.75660e+11, 1.75652e+11,
                           1.75888e+11, 1.75910e+11, 1.75917e+11, 1.76069e+11, 1.75980e+11, 1.76209e+11, 1.76076e+11, 1.76192e+11, 1.76216e+11, 1.76196e+11,
                           1.76197e+11, 1.76254e+11, 1.76215e+11, 1.76308e+11, 1.76242e+11, 1.76280e+11, 1.76385e+11, 1.76425e+11, 1.76357e+11, 1.76081e+11,
                           1.76572e+11, 1.76370e+11, 1.76535e+11, 1.76228e+11, 1.76506e+11, 1.76563e+11, 1.76455e+11, 1.76501e+11, 1.76475e+11, 1.76545e+11,
                           1.76545e+11, 1.76534e+11, 1.76591e+11, 1.76572e+11, 1.76575e+11, 1.76634e+11, 1.76596e+11, 1.76645e+11, 1.76675e+11, 1.76596e+11,
                           1.76708e+11, 1.76716e+11, 1.76662e+11, 1.76698e+11, 1.76740e+11, 1.76659e+11, 1.76779e+11, 1.76729e+11, 1.76871e+11, 1.76672e+11,
                           1.76891e+11, 1.76673e+11, 1.76845e+11, 1.76728e+11, 1.76753e+11, 1.76840e+11, 1.76741e+11, 1.76608e+11, 1.76736e+11, 1.76528e+11,
                           1.76540e+11, 1.76528e+11, 1.76232e+11, 1.76155e+11, 1.76047e+11, 1.75784e+11, 1.75722e+11, 1.75361e+11, 1.74913e+11, 1.74625e+11,
                           1.74258e+11, 1.73891e+11, 1.73173e+11, 1.72700e+11, 1.72067e+11, 1.71258e+11, 1.70522e+11, 1.69575e+11, 1.68555e+11, 1.67639e+11,
                           1.66341e+11, 1.65101e+11, 1.63792e+11, 1.62193e+11, 1.60643e+11, 1.59004e+11, 1.56985e+11, 1.55192e+11, 1.53198e+11, 1.50836e+11,
                           1.48650e+11, 1.46290e+11, 1.43674e+11, 1.41051e+11, 1.38451e+11, 1.35573e+11, 1.32720e+11, 1.29767e+11, 1.26668e+11, 1.23634e+11,
                           1.20505e+11, 1.17332e+11, 1.14272e+11, 1.11004e+11, 1.07865e+11, 1.04646e+11, 1.01408e+11, 9.83568e+10, 9.52562e+10, 9.21223e+10,
                           8.91528e+10, 8.60423e+10, 8.31460e+10, 8.02684e+10, 7.74757e+10, 7.45708e+10, 7.19206e+10, 6.92380e+10, 6.66285e+10, 6.40284e+10,
                           6.15643e+10, 5.91188e+10, 5.67672e+10, 5.44130e+10, 5.21181e+10, 4.99264e+10, 4.77567e+10, 4.56505e+10, 4.35845e+10, 4.15737e+10,
                           3.96111e+10, 3.76589e+10, 3.58124e+10, 3.39705e+10, 3.21820e+10, 3.04149e+10, 2.87027e+10, 2.70503e+10, 2.53789e+10, 2.37972e+10,
                           2.22216e+10, 2.06878e+10, 1.91778e+10, 1.77025e+10, 1.62532e+10, 1.48371e+10, 1.34589e+10, 1.20820e+10, 1.07530e+10, 9.44179e+09,
                           8.15177e+09, 6.88818e+09, 5.64674e+09, 4.42409e+09, 3.22586e+09, 2.04698e+09, 8.88974e+08, 4.38780e+07]

    # Energy distribution
    dist_energy = openmc.stats.Tabular(x=dist_e_x, p=dist_e_p, interpolation='linear-linear')
    return dist_energy

def get_source():

    source          = openmc.IndependentSource()
    source.space    = get_spatial_distribution()
    source.angle    = get_angular_distribution()
    source.energy   = get_energy_distribution()
    source.particle = 'neutron'
    source.strength = 2.7e13

    return source
